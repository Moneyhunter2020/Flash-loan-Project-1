{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/pair.ts","../src/entities/fractions/price.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum ChainId {\n  MAINNET = 1,\n  ROPSTEN = 3,\n  RINKEBY = 4,\n  GÖRLI = 5,\n  KOVAN = 42\n}\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\n\nimport { ChainId, SolidityType } from '../constants'\nimport ERC20 from '../abis/ERC20.json'\nimport { validateAndParseAddress, validateSolidityTypeInstance } from '../utils'\n\nlet CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\nexport class Token {\n  public readonly chainId: ChainId\n  public readonly address: string\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  static async fetchData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof CACHE?.[chainId]?.[address] === 'number'\n        ? CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            CACHE = {\n              ...CACHE,\n              [chainId]: {\n                ...CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n    this.decimals = decimals\n    if (typeof symbol === 'string') this.symbol = symbol\n    if (typeof name === 'string') this.name = name\n  }\n\n  equals(other: Token): boolean {\n    const equal = this.chainId === other.chainId && this.address === other.address\n    if (equal) {\n      invariant(this.decimals === other.decimals, 'DECIMALS')\n      if (this.symbol && other.symbol) invariant(this.symbol === other.symbol, 'SYMBOL')\n      if (this.name && other.name) invariant(this.name === other.name, 'NAME')\n    }\n    return equal\n  }\n\n  sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.ROPSTEN]: new Token(\n    ChainId.ROPSTEN,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.RINKEBY]: new Token(\n    ChainId.RINKEBY,\n    '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class TokenAmount extends Fraction {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  constructor(token: Token, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(token.decimals)))\n    this.token = token\n  }\n\n  get raw(): JSBI {\n    return this.numerator\n  }\n\n  add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding: Rounding = Rounding.ROUND_DOWN): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(\n    decimalPlaces: number = this.token.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.token.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.token.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { Contract } from '@ethersproject/contracts'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  FACTORY_ADDRESS,\n  INIT_CODE_HASH,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _997,\n  _1000\n} from '../constants'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\nimport { TokenAmount } from './fractions/tokenAmount'\n\nlet CACHE: { [token0Address: string]: { [token1Address: string]: string } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n\n  static getAddress(tokenA: Token, tokenB: Token): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    if (CACHE?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      CACHE = {\n        ...CACHE,\n        [tokens[0].address]: {\n          ...CACHE?.[tokens[0].address],\n          [tokens[1].address]: getCreate2Address(\n            FACTORY_ADDRESS,\n            keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n            INIT_CODE_HASH\n          )\n        }\n      }\n    }\n\n    return CACHE[tokens[0].address][tokens[1].address]\n  }\n\n  static async fetchData(\n    tokenA: Token,\n    tokenB: Token,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]))\n  }\n\n  constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n  }\n\n  get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  reserveOf(token: Token): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(inputAmount.token.equals(this.token0) || inputAmount.token.equals(this.token1), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(outputAmount.token.equals(this.token0) || outputAmount.token.equals(this.token1), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _997)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  getLiquidityMinted(totalSupply: TokenAmount, tokenAmountA: TokenAmount, tokenAmountB: TokenAmount): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(token.equals(this.token0) || token.equals(this.token1), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast as any)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Token } from '../token'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { TokenAmount } from './tokenAmount'\n\nexport class Price extends Fraction {\n  public readonly baseToken: Token // input i.e. denominator\n  public readonly quoteToken: Token // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.token, pair.reserve1.token, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.token, pair.reserve0.token, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  constructor(baseToken: Token, quoteToken: Token, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseToken = baseToken\n    this.quoteToken = quoteToken\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseToken.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteToken.decimals))\n    )\n  }\n\n  get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  invert(): Price {\n    return new Price(this.quoteToken, this.baseToken, this.numerator, this.denominator)\n  }\n\n  multiply(other: Price): Price {\n    invariant(this.quoteToken.equals(other.baseToken), 'BASE')\n    const fraction = super.multiply(other)\n    return new Price(this.baseToken, other.quoteToken, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  quote(tokenAmount: TokenAmount): TokenAmount {\n    invariant(tokenAmount.token.equals(this.baseToken), 'TOKEN')\n    return new TokenAmount(this.quoteToken, super.multiply(tokenAmount.raw).quotient)\n  }\n\n  toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { Token } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly midPrice: Price\n\n  constructor(pairs: Pair[], input: Token) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.map(pair => pair.token0.chainId === pairs[0].token0.chainId).every(x => x),\n      'CHAIN_IDS'\n    )\n    const path = [input]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n    invariant(path.length === new Set(path).size, 'PATH')\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n  }\n\n  get input(): Token {\n    return this.path[0]\n  }\n\n  get output(): Token {\n    return this.path[this.path.length - 1]\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Token } from 'entities/token'\nimport invariant from 'tiny-invariant'\n\nimport { ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Fraction, TokenAmount } from './fractions'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { Pair } from './pair'\nimport { Route } from './route'\n\nfunction getSlippage(midPrice: Price, inputAmount: TokenAmount, outputAmount: TokenAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: TokenAmount\n  readonly outputAmount: TokenAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.token.equals(b.inputAmount.token), 'INPUT_TOKEN')\n  invariant(a.outputAmount.token.equals(b.outputAmount.token), 'OUTPUT_TOKEN')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.slippage.lessThan(b.slippage)) {\n    return -1\n  } else if (a.slippage.greaterThan(b.slippage)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\nexport class Trade {\n  public readonly route: Route\n  public readonly tradeType: TradeType\n  public readonly inputAmount: TokenAmount\n  public readonly outputAmount: TokenAmount\n  public readonly executionPrice: Price\n  public readonly nextMidPrice: Price\n  public readonly slippage: Percent\n\n  public constructor(route: Route, amount: TokenAmount, tradeType: TradeType) {\n    invariant(amount.token.equals(tradeType === TradeType.EXACT_INPUT ? route.input : route.output), 'TOKEN')\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      amounts[0] = amount\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      amounts[amounts.length - 1] = amount\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    const inputAmount = amounts[0]\n    const outputAmount = amounts[amounts.length - 1]\n    this.inputAmount = inputAmount\n    this.outputAmount = outputAmount\n    this.executionPrice = new Price(route.input, route.output, inputAmount.raw, outputAmount.raw)\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.slippage = getSlippage(route.midPrice, inputAmount, outputAmount)\n  }\n\n  // get the minimum amount that must be received from this trade for the given slippage tolerance\n  public minimumAmountOut(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      return new TokenAmount(\n        this.outputAmount.token,\n        new Fraction(ONE)\n          .add(slippageTolerance)\n          .invert()\n          .multiply(this.outputAmount.raw).quotient\n      )\n    }\n  }\n\n  // get the maximum amount in that can be spent via this trade for the given slippage tolerance\n  public maximumAmountIn(slippageTolerance: Percent): TokenAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      return new TokenAmount(\n        this.inputAmount.token,\n        new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      )\n    }\n  }\n\n  // given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n  // amount to an output token, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    amountIn: TokenAmount,\n    tokenOut: Token,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: TokenAmount = amountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === amountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut!.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.token),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut!,\n          tokenOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  // similar to the above method but instead targets a fixed output amount\n  // given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n  // to an output token amount, making at most `maxHops` hops\n  // note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n  // the amount in among multiple routes.\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    tokenIn: Token,\n    amountOut: TokenAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: TokenAmount = amountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === amountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn!.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(new Route([pair, ...currentPairs], tokenIn), originalAmountOut, TradeType.EXACT_OUTPUT),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          tokenIn,\n          amountIn!,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n"],"names":["ChainId","TradeType","Rounding","FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_997","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","CACHE","MAINNET","Token","chainId","decimals","symbol","fetchData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","equals","other","equal","sortsBefore","toLowerCase","WETH","ROPSTEN","RINKEBY","GÖRLI","KOVAN","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","TokenAmount","token","amount","parsedAmount","exponentiate","raw","toExact","Pair","tokenAmountA","tokenAmountB","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","reserveOf","token0","token1","reserve0","reserve1","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Price","baseToken","quoteToken","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","slice","reduce","accumulator","currentValue","fraction","quote","tokenAmount","adjusted","Route","input","map","every","currentInput","output","Set","size","midPrice","_100_PERCENT","Percent","getSlippage","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","tradeType","EXACT_INPUT","amounts","Array","nextPairs","nextPair","executionPrice","nextMidPrice","minimumAmountOut","slippageTolerance","EXACT_OUTPUT","maximumAmountIn","bestTradeExactIn","amountIn","tokenOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","amountOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","tokenIn","originalAmountOut","isInsufficientReservesError"],"mappings":"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"}